import { CloseCircleFill } from 'antd-mobile-icons';
import classNames from 'classnames';
import React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';
import { bound } from '../../utils/bound';
import { withNativeProps } from '../../utils/native-props';
import { usePropsValue } from '../../utils/use-props-value';
import { isIOS } from '../../utils/validate';
import { mergeProps } from '../../utils/with-default-props';
import { useConfig } from '../config-provider';
import useInputHandleKeyDown from './useInputHandleKeyDown';
const classPrefix = `adm-input`;
const defaultProps = {
  defaultValue: '',
  clearIcon: React.createElement(CloseCircleFill, null),
  onlyShowClearWhenFocus: true
};
export const Input = forwardRef((props, ref) => {
  const {
    locale,
    input: componentConfig = {}
  } = useConfig();
  const mergedProps = mergeProps(defaultProps, componentConfig, props);
  const [value, setValue] = usePropsValue(mergedProps);
  const [hasFocus, setHasFocus] = useState(false);
  const compositionStartRef = useRef(false);
  const nativeInputRef = useRef(null);
  const handleKeydown = useInputHandleKeyDown({
    onEnterPress: mergedProps.onEnterPress,
    onKeyDown: mergedProps.onKeyDown,
    nativeInputRef,
    enterKeyHint: mergedProps.enterKeyHint
  });
  useImperativeHandle(ref, () => ({
    clear: () => {
      setValue('');
    },
    focus: () => {
      var _a;
      (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    },
    blur: () => {
      var _a;
      (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.blur();
    },
    get nativeElement() {
      return nativeInputRef.current;
    }
  }));
  function checkValue() {
    let nextValue = value;
    if (mergedProps.type === 'number') {
      const boundValue = nextValue && bound(parseFloat(nextValue), mergedProps.min, mergedProps.max).toString();
      // fix the display issue of numbers starting with 0
      if (Number(nextValue) !== Number(boundValue)) {
        nextValue = boundValue;
      }
    }
    if (nextValue !== value) {
      setValue(nextValue);
    }
  }
  const shouldShowClear = (() => {
    if (!mergedProps.clearable || !value || mergedProps.readOnly) return false;
    if (mergedProps.onlyShowClearWhenFocus) {
      return hasFocus;
    } else {
      return true;
    }
  })();
  return withNativeProps(mergedProps, React.createElement("div", {
    className: classNames(`${classPrefix}`, mergedProps.disabled && `${classPrefix}-disabled`)
  }, React.createElement("input", {
    ref: nativeInputRef,
    className: `${classPrefix}-element`,
    value: value,
    onChange: e => {
      setValue(e.target.value);
    },
    onFocus: e => {
      var _a;
      setHasFocus(true);
      (_a = mergedProps.onFocus) === null || _a === void 0 ? void 0 : _a.call(mergedProps, e);
    },
    onBlur: e => {
      var _a;
      setHasFocus(false);
      checkValue();
      (_a = mergedProps.onBlur) === null || _a === void 0 ? void 0 : _a.call(mergedProps, e);
    },
    id: mergedProps.id,
    placeholder: mergedProps.placeholder,
    disabled: mergedProps.disabled,
    readOnly: mergedProps.readOnly,
    maxLength: mergedProps.maxLength,
    minLength: mergedProps.minLength,
    max: mergedProps.max,
    min: mergedProps.min,
    autoComplete: mergedProps.autoComplete,
    enterKeyHint: mergedProps.enterKeyHint,
    autoFocus: mergedProps.autoFocus,
    pattern: mergedProps.pattern,
    inputMode: mergedProps.inputMode,
    type: mergedProps.type,
    name: mergedProps.name,
    autoCapitalize: mergedProps.autoCapitalize,
    autoCorrect: mergedProps.autoCorrect,
    onKeyDown: handleKeydown,
    onKeyUp: mergedProps.onKeyUp,
    onCompositionStart: e => {
      var _a;
      compositionStartRef.current = true;
      (_a = mergedProps.onCompositionStart) === null || _a === void 0 ? void 0 : _a.call(mergedProps, e);
    },
    onCompositionEnd: e => {
      var _a;
      compositionStartRef.current = false;
      (_a = mergedProps.onCompositionEnd) === null || _a === void 0 ? void 0 : _a.call(mergedProps, e);
    },
    onClick: mergedProps.onClick,
    step: mergedProps.step,
    role: mergedProps.role,
    "aria-valuenow": mergedProps['aria-valuenow'],
    "aria-valuemax": mergedProps['aria-valuemax'],
    "aria-valuemin": mergedProps['aria-valuemin'],
    "aria-label": mergedProps['aria-label']
  }), shouldShowClear && React.createElement("div", {
    className: `${classPrefix}-clear`,
    onMouseDown: e => {
      e.preventDefault();
    },
    onClick: () => {
      var _a, _b;
      setValue('');
      (_a = mergedProps.onClear) === null || _a === void 0 ? void 0 : _a.call(mergedProps);
      // https://github.com/ant-design/ant-design-mobile/issues/5212
      if (isIOS() && compositionStartRef.current) {
        compositionStartRef.current = false;
        (_b = nativeInputRef.current) === null || _b === void 0 ? void 0 : _b.blur();
      }
    },
    "aria-label": locale.Input.clear
  }, mergedProps.clearIcon)));
});